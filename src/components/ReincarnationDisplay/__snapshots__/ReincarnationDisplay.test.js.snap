// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReincarnationDisplay should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ReincarnationDisplay
    Submit={
      Object {
        "addMatchers": [Function],
        "advanceTimersByTime": [Function],
        "autoMockOff": [Function],
        "autoMockOn": [Function],
        "clearAllMocks": [Function],
        "clearAllTimers": [Function],
        "deepUnmock": [Function],
        "disableAutomock": [Function],
        "doMock": [Function],
        "dontMock": [Function],
        "enableAutomock": [Function],
        "fn": [Function],
        "genMockFromModule": [Function],
        "isMockFunction": [Function],
        "mock": [Function],
        "requireActual": [Function],
        "requireMock": [Function],
        "resetAllMocks": [Function],
        "resetModuleRegistry": [Function],
        "resetModules": [Function],
        "restoreAllMocks": [Function],
        "retryTimes": [Function],
        "runAllImmediates": [Function],
        "runAllTicks": [Function],
        "runAllTimers": [Function],
        "runOnlyPendingTimers": [Function],
        "runTimersToTime": [Function],
        "setMock": [Function],
        "setTimeout": [Function],
        "spyOn": [Function],
        "unmock": [Function],
        "useFakeTimers": [Function],
        "useRealTimers": [Function],
      }
    }
    deathsByDate={
      Array [
        Object {
          "created_at": "2018-10-13T00:30:37.227Z",
          "date_id": 414,
          "deletable": false,
          "id": 1362,
          "person_name": "Lefty Gomez",
          "updated_at": "2018-10-13T00:30:37.227Z",
          "year": 1989,
        },
      ]
    }
    handleSubmit={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h2>
          ! You Were 
          414
           In Your Past Life!
        </h2>,
        <div
          className="comment-wrapper"
        >
          <label>
            Leave a comment:
          </label>
          <div
            className="bottom-wrapper"
          >
            <textarea
              className="comment"
              name="comment"
              onChange={[Function]}
              value=""
            />
            <Submit
              buttonText="SAVE"
              handleSubmit={[Function]}
            />
          </div>
        </div>,
      ],
      "className": "reincarnation-display",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            undefined,
            "! You Were ",
            414,
            " In Your Past Life!",
          ],
        },
        "ref": null,
        "rendered": Array [
          undefined,
          "! You Were ",
          414,
          " In Your Past Life!",
        ],
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <label>
              Leave a comment:
            </label>,
            <div
              className="bottom-wrapper"
            >
              <textarea
                className="comment"
                name="comment"
                onChange={[Function]}
                value=""
              />
              <Submit
                buttonText="SAVE"
                handleSubmit={[Function]}
              />
            </div>,
          ],
          "className": "comment-wrapper",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Leave a comment:",
            },
            "ref": null,
            "rendered": "Leave a comment:",
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <textarea
                  className="comment"
                  name="comment"
                  onChange={[Function]}
                  value=""
                />,
                <Submit
                  buttonText="SAVE"
                  handleSubmit={[Function]}
                />,
              ],
              "className": "bottom-wrapper",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "comment",
                  "name": "comment",
                  "onChange": [Function],
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": "textarea",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "buttonText": "SAVE",
                  "handleSubmit": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "article",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h2>
            ! You Were 
            414
             In Your Past Life!
          </h2>,
          <div
            className="comment-wrapper"
          >
            <label>
              Leave a comment:
            </label>
            <div
              className="bottom-wrapper"
            >
              <textarea
                className="comment"
                name="comment"
                onChange={[Function]}
                value=""
              />
              <Submit
                buttonText="SAVE"
                handleSubmit={[Function]}
              />
            </div>
          </div>,
        ],
        "className": "reincarnation-display",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              undefined,
              "! You Were ",
              414,
              " In Your Past Life!",
            ],
          },
          "ref": null,
          "rendered": Array [
            undefined,
            "! You Were ",
            414,
            " In Your Past Life!",
          ],
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label>
                Leave a comment:
              </label>,
              <div
                className="bottom-wrapper"
              >
                <textarea
                  className="comment"
                  name="comment"
                  onChange={[Function]}
                  value=""
                />
                <Submit
                  buttonText="SAVE"
                  handleSubmit={[Function]}
                />
              </div>,
            ],
            "className": "comment-wrapper",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Leave a comment:",
              },
              "ref": null,
              "rendered": "Leave a comment:",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <textarea
                    className="comment"
                    name="comment"
                    onChange={[Function]}
                    value=""
                  />,
                  <Submit
                    buttonText="SAVE"
                    handleSubmit={[Function]}
                  />,
                ],
                "className": "bottom-wrapper",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "comment",
                    "name": "comment",
                    "onChange": [Function],
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "textarea",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "buttonText": "SAVE",
                    "handleSubmit": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "article",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
